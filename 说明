技术栈：vue+vant+es6+node.js+koa+mongoDB
前后端数据分离 
vant：基于vue的组件库  nodejs：js运行到服务端
koa：同express    mongoDB：数据库，键值对数据库

项目搭建：安装node https://nodejs.org/zh-cn    node_v
         安装vuecli: npm install -g @vue/cli
         查看版本号：vue -V 
         创建项目： vue create shop 或者 vue ui
         进入项目： cd shop
         运行项目： npm run serve
readme??怎么写
组件库：vant vux element iview
一、移动端屏幕适配：百分比/媒体查询/flex弹性盒模型/rem 
2.首页布局和vant
   安装vant  npm install vant --save
   //完全引入（main.js）
   import Vant from 'vant'
   import 'vant/lib/index.css'
   Vue.use(Vant)
   //部分引入 npm i bable-plugin-import -D      （main.js）
   import {Button,Icon,NavBar} from 'vant'
   Vue.use(Button).use(Icon).use(NavBar)
   注：npm install xxx --save-dev 安装在开发环境下
3.slot  v-model双向数据绑定
4.<img v-lazy="item.imgsrc" alt=""图片懒加载  加载前两张之后再加载第三张
  <img ：src="item.imgsrc" alt="">
5.home.vue  
        导航栏：vant组件库  van-nav-bar
        轮播图：vant组件库  van-swipe
        热门产品： npm install vue-awesome-swiper --save     (npm官网) http://idangero.us/swiper/api/
        推荐商品：弹性盒模型  justify-content: space-around;
  app.vue 
        底部栏：vant  van-tabbar
6.弹性盒模型：display：flex
             flex-grow：1；width：0；
7.引入swiper
  // require styles
      import 'swiper/dist/css/swiper.css'
      
      import { swiper, swiperSlide } from 'vue-awesome-swiper'
      
      export default {
        components: {
          swiper,
          swiperSlide
        }
      }
8.ajax&axios: axios基于promise的http库:npm install axios --save          promise解决回调深渊 .then 异步
              ajax原理代码在Ajax.vue中    
9.vbase快捷创建vue
10.在main.js引入mock.js    npm install mockjs --save
   mockjs: 生成随即数据，拦截ajax
   使用mockjs 方法一：在mock.js中： import Mock from 'mockjs'
              写一个json文件
              在mock.js中： Mock.mock('url',{data=data.list})
              方法二：
              Mock.mock('http://www.alin.com/getuser',{
              'name|2':'alin',//两个name  alinalin
              'age|18-30':20//age：18-30中的随机数  20只是表示数字类型
              })  等等。。。。
注意说明：home.vue加载后会执行生命周期函数 created（）----axios.get('url').then(res=>{})----
        url是自己在mockjs自己写的getlist方法：Mock.mock('http://www.alin.com/getlist',{data:data.list})  
        Mock：是import Mock from 'mockjs'       data：是import data from './data.json'
        ----然后就返回了自己写的json了
11.后台统一接口配置： service.config.js [名字竟然不能拼错emmm]
        const MOCKURL='http://www.alin.com/';//mock模拟的url
        const SERVER='';//真实url
        const URL={
            getVarietyItem : MOCKURL + 'getVarietyItem',
            getHotProduct : MOCKURL + 'getHotProduct'
        };
        export default URL;//导出
        在home.vue中：import url from '@/service.config.js' ----  let url=url.getVarietyItem
12.koa2: 基于node.js平台的下一代web开发框架
   基于koa的框架egg  thinkjs
   安装：node  ==>>  npm init -y  ==>>  npm install koa --save
   通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理

【注意】async await  : async函数返回promise对象  await只能在async函数内部使用  js异步操作解决方案   具体见1-async.js 和 2-async.js
  koa实现get/post请求：
  1.  let url=ctx.url;
      let query=ctx.query;
      let queryString = ctx.querystring;
      ctx.body={
          url,
          query,//返回格式化好的参数对象
          queryString //返回的是请求的字符串
      }
      //结果：地址栏输入http://localhost:3000/?username=alin&age=19  
      //对应的结果是{"url":"/?username=alin&age=19","query":{"username":"alin","age":"19"},"queryString":"username=alin&age=19"}
  2.post.js:  为了拿到key 和value的值的话需要解析data字符串  需要安装：npm install koa-bodyparser --save
              变简单了，不用去监听事件(在5_bodyparser.js)
  3.koa-router(npm): npm install koa-router --save
      https://www.npmjs.com/package/koa-router#module_koa-router--Router+get%7Cput%7Cpost%7Cpatch%7Cdelete%7Cdel
    一、
  eg  const Router=require('koa-router')
      const router=new Router();

      router.get('/abc',(ctx,next)=>{
          console.log(ctx);//request对象
          console.log(next);//[Function:next]
          ctx.body='alin';
      })
      app.use(router.routes());
      app.use(router.allowedMethods());
      二、
    路由前缀：解决 当你的请求地址前需要再配‘/hsdaiulh’ 时 这个问题  
             方法：const router=new Router({prefix:'/alindeqianzhui'});
      三、传参params
      router.get('/abc',(ctx,next)=>{
      ctx.body=ctx.query;
      })
  4.cookie:例子见9_cookie.js
  5.ejs模板： 安装 npm install koa-views --save
                  npm install ejs --save
  MVC：m（与数据库建立连接部分）v（试图）c（m与c连接部分，v发送请求业务逻辑层，数据库结果返回给界面）

             用法：koa下建立ejs.js
                        const Koa=require('koa');
                        const app = new Koa();
                        const views=require('koa-views');
                        const path=require('path');//webpack
                        //加载模板
                        app.use(views(path.join(__dirname,'./views'),{
                            extension:'ejs'
                        }))
                        app.use(async ctx => {
                            let title='hello alin';
                            await ctx.render('index',{title});
                        });
                  ./views/index.ejs
                        <h1><%=title%></h1>



13. mongoDB(文件存储 频繁读写 ):
  安装： www.mongodb.com 
      环境变量bin
      命令：mongodb  
  常用命令：
      mongo:在cmd中输入
      变量：var
      函数：function
        eg  var a=5;
            > print(a);
            5
            > function sum(x,y){
            ... return x+y;
            ... }
            > sum(5，6);
      输出：print
      显示数据库：show dbs
      创建/进入 shop数据库：use shop
      db:当前命令在哪个数据库，显示当前数据库
      显示集合：show collections
    eg      
            > show dbs
            admin   0.000GB
            config  0.000GB
            local   0.000GB
            > use shop
            > db
            shop
            > show collections
            > load('./2.js')     注意这点非常需要
      插入数据：db.user.insert({"name":"alin"})
      查询：db.user.find()  db.user.findOne()
      修改：db.user.update({查询},{修改})
      删除：db.user.remove（条件）
      删除集合：db.user.drop()
      删除数据库：db.dropDatabase()
     eg         db.user.insert({"name":"alin1"})
                WriteResult({ "nInserted" : 1 })
                > db.user.find()
                { "_id" : ObjectId("5c90350cac09f1b952bee8ed"), "name" : "alin1" }
                > db.user.findOne()
                { "_id" : ObjectId("5c90350cac09f1b952bee8ed"), "name" : "alin1" }
                > db.user.remove({"name":"alin1"})
                WriteResult({ "nRemoved" : 1 })
                > db.user.find()
                > db.user.drop()
                true
                > db.user.find()
      加载js文件 load('./xx.js')
eg  load('./1.js')
    connecting to: mongodb://127.0.0.1:27017/shop
    Implicit session: session { "id" : UUID("54c74ad1-cdc4-4743-b896-53226db85e58") }
    MongoDB server version: 4.0.6
    insert success
    true
    > db.user.find()
    { "_id" : ObjectId("5c903b8f4a1b5fdc1a3c66e5"), "username" : "alin", "regesterTime" : 1552956303000 }


    更新数据: 
        方法：1.$set:  db.user.update({name:'alin1'},{$set:{age:18}})       //更改age=18  如果只更改某一用户的某一项信息，需要在db.user.update({user1},{new user1})       
             2.$unset: db.user.update({name:'alin1'},{$set:{hobby:''}})     【注】hobby加不加''都可以  //将hobby变成空的  //删除某一用户一个数组（hobby）
             3.upsert:  db.user.update({name:'alin1'},{$set:{age:22}},{upsert:true})   //如果有age这个属性那就更新，没有该属性就添加age属性
             4.multi： db.user.update({},{$set:{hobby:['bat']}},{multi:true})    //所有user都加
             5.$push: db.user.update({name:'alin'},{$push:{hobby:'吃鸡'}})       //给某一特定对象的数组内增加一个元素
             6.$addToSet : 作用同5，但是多了个检测 添加项内容有没有存在 ，$push的话增加的相同项也会被加进数组
             7.通过$set改变数据中第一个的值：db.user.update({name:'alin1'},{$set:{'hobby.0':'bytedance'}})
             8.